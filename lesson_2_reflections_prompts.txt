What happens when you initialize a repository? Why do you need to do it?

When you initalize a repository it creates a .git file in order
to track the commits(changes) you make to the files in the
repository. Whe you initialize a repository, there will be 0
commits added because you just created the new repository


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is an intermediate place for you to add your files
before making commits. Files can only be added one at a time, and it
contains only the files you have specifically added to it. Your working
directory contains all of you files in that directory. Once you commit changes to the files in the staging area, git bundles the all the contents of the staging area into a single commit and stores it in the repository.

How can you use the staging area to make sure you have one commit per logical change?

You can only make commits to files you have added to the staging area.
Then, when you have added the file(s) to the staging area, you can
use git diff --staged to check that the file(s) you are about to commit
only have one logical change compared to the most recent commit


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches might be helpful when you decide to create a new feature that 
you aren't sure is going to work, but you still want to have a working demo of. Accomplishing this with only checkouts without branches could create some bugs and messy overhead down the line. Also, branches can be merged with the master later, if the master was updated in some ways afte the branch was created.